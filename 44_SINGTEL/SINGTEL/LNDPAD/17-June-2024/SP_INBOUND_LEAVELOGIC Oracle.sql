/*
 * This file      : DBMTK_USER_NAME.FN_GETCURRENTPERIOD.FUNCTION.sqlscript
 * Converted from : DBMTK_USER_NAME.FN_GETCURRENTPERIOD.FUNCTION.plsql
 *
 * Source DBMS          : Oracle, version unknown
 * Source DB servername : -undefined-
 * Target DBMS          : SAP Hana 2 >= SP05 (SQLScript)
 *
 *
 * User config(id=101) : Include default configuration settings in header of generated files: Setting=yes
 * User config(id=423) : Report identifier upper/lowercase analysis: Setting=no
 * User config(id=330) : Case mapping for usernames: Setting=nomap
 * User config(id=331) : Case mapping for names of schema objects (tables,views,columns,indexes,sequences,etc.): Setting=nomap
 * User config(id=332) : Case mapping for names of SQL objects (procedures, functions; not for variables/parameters): Setting=nomap
 * User config(id=335) : Apply case mappings also when source DBMS is case-sensitive for identifiers: Setting=no
 * User config(id=211) : Include an 'ORIGSQL' comment with the original SQL in the converted SQL: Setting=yes
 * User config(id=212) : Max. number of characters of original SQL in 'ORIGSQL' comment: Setting=80
 * User config(id=215) : Append 'NOT CONVERTED' comment to unconverted statements in the converted SQL: Setting=yes
 * User config(id=217) : Report additional details about some conversion categories, either for all files or only the totals: Setting=all
 * User config(id=218) : Report details ordered by functionality or by impact: Setting=functionality
 * User config(id=220) : Datatype to convert Oracle INT, INTEGER or SMALLINT (which have 38-digit precision): Setting=BIGINT
 * User config(id=221) : Length to convert Oracle (VAR)CHAR(2) declared without length: Setting=75
 * User config(id=222) : For variables/parameters, datatype to convert Oracle NUMBER declared without precision: Setting=NUMERIC(38,10)
 * User config(id=223) : For table/view columns, datatype to convert Oracle NUMBER declared without precision: Setting=NUMERIC(38,10)
 * User config(id=224) : For variables/parameters, datatype to convert Oracle NUMBER declared with precision but without scale(see User Guide): Setting=optimized_integer
 * User config(id=225) : For table/view columns, datatype to convert Oracle NUMBER declared with precision but without scale(see User Guide): Setting=optimized_integer
 * User config(id=231) : Length to convert a CHAR/BINARY datatype exceeding the target DBMS length: Setting=MAX
 * User config(id=265) : Convert Oracle packages to Hana User-Defined Libraries: Setting=no
 * User config(id=290) : Default conversion of DBMS_OUTPUT.PUT_LINE/GET_LINE: Setting=print
 * User config(id=292) : Conversion of PRINT-style statements: Setting=sqlscript_print
 * User config(id=300) : Conversion of REF CURSOR output parameters in procedures called from the client app: Setting=table_variable
 * User config(id=310) : Generate a SQL SECURITY/EXECUTE AS clause for procedures/functions: Setting=yes
 * User config(id=320) : Ignore or keep the leading 'N' in Unicode string notation N'...': Setting=ignore
 * User config(id=441) : Generate identity columns as BY DEFAULT or ALWAYS: Setting=by_default
 * User config(id=380) : How aggressively to convert identifiers in SQL objects (higher=slower): Setting=medium
 * User config(id=382) : How to rename identifiers that are reserved words: delimited, or with a suffix: Setting=delimited
 * User config(id=383) : How to handle identifiers that are non-recommended words (e.g. ANSI-reserved): Setting=ignore
 * User config(id=385) : When to substitute a column alias with the expression, when referenced in the query(settings are cumulative): Setting=simple_expression
 * User config(id=600) : Schema for run-time components: Setting=sapdbmtk
 * User config(id=704) : Show warning counts in Hana when running run_ddl/run_sql generated shell scripts: Setting=yes
 * User config(id=720) : Include the original SQL code at the end of the converted file: Setting=no
 * User config(id=781) : Generate call to customizable procedure after each object creation: Setting=yes
 *   NB: Settings marked '*' are set to non-defaults (use config #101=no for condensed overview))
 *
 * Project directory : C:/HANAMigrations/STELLND
 *
 *-----------------------------------------------------------------------------
 * Generated by SAP Advanced SQL Migration v.3.5.3 at 09-May-2024 20:51:34
 * (generated with: sapdbmtk convert, 64791)
 * SAP Advanced SQL Migration is property of SAP SE.
 *-----------------------------------------------------------------------------
 */
go
CALL sapdbmtk.sp_dbmtk_report_connect('DBMTK_USER_NAME.FN_GETCURRENTPERIOD.FUNCTION.sqlscript') WITH HINT(IGNORE_PLAN_CACHE)
go

-- Verify the target database has the expected version (or later).
-- This proc aborts the script if the version is earlier than expected:
CALL sapdbmtk.sp_dbmtk_target_dbms_version_check('HANA', '2SP05', 'DBMTK_USER_NAME.FN_GETCURRENTPERIOD.FUNCTION.sqlscript') WITH HINT(IGNORE_PLAN_CACHE)
go
CALL sapdbmtk.sp_dbmtk_hang_session  -- NB: hangs only when waiting for user to abort session with CTRL-C (message is printed first)
go

-- Verify Hana database being used
CALL sapdbmtk.sp_dbmtk_HANA_db_check()
go
CALL sapdbmtk.sp_dbmtk_hang_session  -- NB: hangs only when waiting for user to abort session with CTRL-C (message is printed first)
go

-- Verify we have the required permissions
CALL sapdbmtk.sp_dbmtk_target_permissions_check()
go
CALL sapdbmtk.sp_dbmtk_hang_session  -- NB: hangs only when waiting for user to abort session with CTRL-C (message is printed first)
go
DO BEGIN
	if exists (select * from SYS.USERS where user_name = upper('DBMTK_USER_NAME')) THEN
		EXECUTE IMMEDIATE 'CONNECT DBMTK_USER_NAME PASSWORD "JBQue%eSMPF069Wp"';
		SELECT 'Reconnected as user '''||SESSION_USER||'''' FROM SYS.DUMMY;
	END IF;
END
go
SET SCHEMA DBMTK_USER_NAME
go

/********************* Converted SQL code starts here:*************************/

/*
 * This file was extracted from 'C:/HANAMigrations/STELLND/OracleObjects/FN_GETCURRENTPERIOD.sql'
 * at 09-May-2024 20:47:09 with the 'extract_offline' command of SAP Advanced SQL Migration v.3.5.3 (64791)
 * User config setting for 'extract_offline' (id=132) was '0'.
 */
go

--********** Creating function 'DBMTK_USER_NAME.FN_GETCURRENTPERIOD' ********************
go

CALL SQLSCRIPT_PRINT:PRINT_LINE( 'Creating function ''DBMTK_USER_NAME.FN_GETCURRENTPERIOD''...' );
go

/* ORIGSQL: CREATE OR REPLACE FUNCTION FN_GETCURRENTPERIOD RETURN NUMBER AS v_ret number; */
CREATE OR REPLACE FUNCTION DBMTK_USER_NAME.FN_GETCURRENTPERIOD
()
RETURNS dbmtk_function_result DECIMAL(38,10)   /* ORIGSQL: RETURN NUMBER */
LANGUAGE SQLSCRIPT
SQL SECURITY DEFINER
DEFAULT SCHEMA DBMTK_USER_NAME
AS
BEGIN
    /* sapdbmtk: one or more DECLARE statements below were moved upwards, before the first executable statement */
    DECLARE v_ret DECIMAL(38,10);  /* ORIGSQL: v_ret number; */
    DECLARE v_lastpost DECIMAL(38,10);  /* ORIGSQL: v_lastpost number; */

    --return 2533274790396269; --hardocded tempoaraily for testing
    --return 2533274790396199; --hardocded tempoaraily for testing 
    dbmtk_function_result = 2533274790396267;
    RETURN;
    --apr 2017 for testing
    SELECT
        MAX(pr.periodseq)
    INTO
        v_lastpost
    FROM
        DBMTK_USER_NAME.cs_pipelinerun_AT_STELEXT pr
        /* RESOLVE: Oracle Database link: Remote table/view 'DBMTK_USER_NAME.cs_pipelinerun@STELEXT' at Oracle DBlink 'STELEXT' is converted to HANA virtual table 'DBMTK_USER_NAME.cs_pipelinerun_AT_STELEXT'; see 'dbmtk_create_remote_tables.sqlscript' for creating this virtual table. */
    WHERE
        command = 'PipelineRun'
        AND description LIKE '%Pay%';

    SELECT
        MIN(periodseq)
    INTO
        v_ret
    FROM
        (
            SELECT   /* ORIGSQL: (select pd.periodseq from cs_period@STELEXT pd join cs_period@STELEXT pdprev on (...) */
                pd.periodseq
            FROM
                DBMTK_USER_NAME.cs_period_AT_STELEXT pd
            INNER JOIN
                DBMTK_USER_NAME.cs_period_AT_STELEXT pdprev
                ON pdprev.periodseq = :v_lastpost
                AND pdprev.periodtypeseq = pd.periodtypeseq
                AND pdprev.calendarseq = pd.calendarseq
                AND pdprev.enddate = pd.startdate
                /* RESOLVE: Oracle Database link: Remote table/view 'DBMTK_USER_NAME.cs_period@STELEXT' at Oracle DBlink 'STELEXT' is converted to HANA virtual table 'DBMTK_USER_NAME.cs_period_AT_STELEXT'; see 'dbmtk_create_remote_tables.sqlscript' for creating this virtual table. */
                /* RESOLVE: Oracle Database link: Remote table/view 'DBMTK_USER_NAME.cs_period@STELEXT' at Oracle DBlink 'STELEXT' is converted to HANA virtual table 'DBMTK_USER_NAME.cs_period_AT_STELEXT'; see 'dbmtk_create_remote_tables.sqlscript' for creating this virtual table. */
            WHERE
                pdprev.removedate >CURRENT_TIMESTAMP   /* ORIGSQL: sysdate */
                AND pd.removedate >CURRENT_TIMESTAMP   /* ORIGSQL: sysdate */
        UNION
            SELECT   /* ORIGSQL: select distinct pd.periodseq from cs_period@STELEXT pd join cs_calendar@STELEXT (...) */
                DISTINCT
                pd.periodseq
            FROM
                DBMTK_USER_NAME.cs_period_AT_STELEXT pd
            INNER JOIN
                DBMTK_USER_NAME.cs_calendar_AT_STELEXT ca
                ON pd.calendarseq = ca.calendarseq
                AND ca.removedate >CURRENT_TIMESTAMP   /* ORIGSQL: sysdate */
                AND ca.name = 'Singtel Monthly Calendar'
            INNER JOIN
                DBMTK_USER_NAME.cs_periodtype_AT_STELEXT pt
                ON pt.periodtypeseq = pd.periodtypeseq
                AND pt.removedate >CURRENT_TIMESTAMP   /* ORIGSQL: sysdate */
                AND pt.name = 'month'
                /* RESOLVE: Oracle Database link: Remote table/view 'DBMTK_USER_NAME.cs_periodtype@STELEXT' at Oracle DBlink 'STELEXT' is converted to HANA virtual table 'DBMTK_USER_NAME.cs_periodtype_AT_STELEXT'; see 'dbmtk_create_remote_tables.sqlscript' for creating this virtual table. */
                /* RESOLVE: Oracle Database link: Remote table/view 'DBMTK_USER_NAME.cs_period@STELEXT' at Oracle DBlink 'STELEXT' is converted to HANA virtual table 'DBMTK_USER_NAME.cs_period_AT_STELEXT'; see 'dbmtk_create_remote_tables.sqlscript' for creating this virtual table. */
                /* RESOLVE: Oracle Database link: Remote table/view 'DBMTK_USER_NAME.cs_calendar@STELEXT' at Oracle DBlink 'STELEXT' is converted to HANA virtual table 'DBMTK_USER_NAME.cs_calendar_AT_STELEXT'; see 'dbmtk_create_remote_tables.sqlscript' for creating this virtual table. */
            WHERE
                ADD_MONTHS(CURRENT_TIMESTAMP,0) BETWEEN pd.startdate AND TO_DATE(ADD_SECONDS(pd.enddate,(86400*-1)))   /* ORIGSQL: sysdate */
                                                                                                                       /* ORIGSQL: pd.enddate-1 */
        ) AS a;

    --set to 2015 for SIT only 
    dbmtk_function_result = :v_ret;
    RETURN;
END;
go
CALL sapdbmtk.sp_dbmtk_object_install_custom('function', 'DBMTK_USER_NAME', 'FN_GETCURRENTPERIOD') WITH HINT(IGNORE_PLAN_CACHE);
go

/*
 * end of 'DBMTK_USER_NAME.FN_GETCURRENTPERIOD.FUNCTION.sqlscript'
 */
go

