/*
 * This file      : AIASEXT.SA_STAGEHOOK.PACKAGE-BODY.sqlscript
 * Converted from : AIASEXT.SA_STAGEHOOK.PACKAGE-BODY.plsql
 *
 * Source DBMS          : Oracle, version unknown
 * Source DB servername : -undefined-
 * Target DBMS          : SAP Hana 2 >= SP05 (SQLScript)
 *
 *
 * User config(id=101) : Include default configuration settings in header of generated files: Setting=yes
 * User config(id=423) : Report identifier upper/lowercase analysis: Setting=no
 * User config(id=330) : Case mapping for usernames: Setting=nomap
 * User config(id=331) : Case mapping for names of schema objects (tables,views,columns,indexes,sequences,etc.): Setting=nomap
 * User config(id=332) : Case mapping for names of SQL objects (procedures, functions; not for variables/parameters): Setting=nomap
 * User config(id=335) : Apply case mappings also when source DBMS is case-sensitive for identifiers: Setting=no
 * User config(id=211) : Include an 'ORIGSQL' comment with the original SQL in the converted SQL: Setting=yes
 * User config(id=212)*: Max. number of characters of original SQL in 'ORIGSQL' comment: Setting=200
 * User config(id=215) : Append 'NOT CONVERTED' comment to unconverted statements in the converted SQL: Setting=yes
 * User config(id=217) : Report additional details about some conversion categories, either for all files or only the totals: Setting=all
 * User config(id=218) : Report details ordered by functionality or by impact: Setting=functionality
 * User config(id=220) : Datatype to convert Oracle INT, INTEGER or SMALLINT (which have 38-digit precision): Setting=BIGINT
 * User config(id=221)*: Length to convert Oracle (VAR)CHAR(2) declared without length: Setting=255
 * User config(id=222)*: For variables/parameters, datatype to convert Oracle NUMBER declared without precision: Setting=Decimal(38,10)
 * User config(id=223)*: For table/view columns, datatype to convert Oracle NUMBER declared without precision: Setting=Decimal(38,10)
 * User config(id=224) : For variables/parameters, datatype to convert Oracle NUMBER declared with precision but without scale(see User Guide): Setting=optimized_integer
 * User config(id=225) : For table/view columns, datatype to convert Oracle NUMBER declared with precision but without scale(see User Guide): Setting=optimized_integer
 * User config(id=231) : Length to convert a CHAR/BINARY datatype exceeding the target DBMS length: Setting=MAX
 * User config(id=265)*: Convert Oracle packages to Hana User-Defined Libraries: Setting=yes
 * User config(id=290) : Default conversion of DBMS_OUTPUT.PUT_LINE/GET_LINE: Setting=print
 * User config(id=292) : Conversion of PRINT-style statements: Setting=sqlscript_print
 * User config(id=300) : Conversion of REF CURSOR output parameters in procedures called from the client app: Setting=table_variable
 * User config(id=310) : Generate a SQL SECURITY/EXECUTE AS clause for procedures/functions: Setting=yes
 * User config(id=320) : Ignore or keep the leading 'N' in Unicode string notation N'...': Setting=ignore
 * User config(id=441) : Generate identity columns as BY DEFAULT or ALWAYS: Setting=by_default
 * User config(id=380) : How aggressively to convert identifiers in SQL objects (higher=slower): Setting=medium
 * User config(id=382) : How to rename identifiers that are reserved words: delimited, or with a suffix: Setting=delimited
 * User config(id=383) : How to handle identifiers that are non-recommended words (e.g. ANSI-reserved): Setting=ignore
 * User config(id=385) : When to substitute a column alias with the expression, when referenced in the query(settings are cumulative): Setting=simple_expression
 * User config(id=600) : Schema for run-time components: Setting=sapdbmtk
 * User config(id=704) : Show warning counts in Hana when running run_ddl/run_sql generated shell scripts: Setting=yes
 * User config(id=720) : Include the original SQL code at the end of the converted file: Setting=no
 * User config(id=781) : Generate call to customizable procedure after each object creation: Setting=yes
 *   NB: Settings marked '*' are set to non-defaults (use config #101=no for condensed overview))
 *
 * Project directory : C:/HANAMigrations/AIASG
 *
 *-----------------------------------------------------------------------------
 * Generated by SAP Advanced SQL Migration v.3.5.3 at 05-Jun-2024 14:25:12
 * (generated with: sapdbmtk convert, 64791)
 * SAP Advanced SQL Migration is property of SAP SE.
 *-----------------------------------------------------------------------------
 */
go
CALL sapdbmtk.sp_dbmtk_report_connect('AIASEXT.SA_STAGEHOOK.PACKAGE-BODY.sqlscript') WITH HINT(IGNORE_PLAN_CACHE)
go

-- Verify the target database has the expected version (or later).
-- This proc aborts the script if the version is earlier than expected:
CALL sapdbmtk.sp_dbmtk_target_dbms_version_check('HANA', '2SP05', 'AIASEXT.SA_STAGEHOOK.PACKAGE-BODY.sqlscript') WITH HINT(IGNORE_PLAN_CACHE)
go
CALL sapdbmtk.sp_dbmtk_hang_session  -- NB: hangs only when waiting for user to abort session with CTRL-C (message is printed first)
go

-- Verify Hana database being used
CALL sapdbmtk.sp_dbmtk_HANA_db_check()
go
CALL sapdbmtk.sp_dbmtk_hang_session  -- NB: hangs only when waiting for user to abort session with CTRL-C (message is printed first)
go

-- Verify we have the required permissions
CALL sapdbmtk.sp_dbmtk_target_permissions_check()
go
CALL sapdbmtk.sp_dbmtk_hang_session  -- NB: hangs only when waiting for user to abort session with CTRL-C (message is printed first)
go
DO BEGIN
	if exists (select * from SYS.USERS where user_name = upper('AIASEXT')) THEN
		EXECUTE IMMEDIATE 'CONNECT AIASEXT PASSWORD "yMyCA7y232Dbt!m3"';
		SELECT 'Reconnected as user '''||SESSION_USER||'''' FROM SYS.DUMMY;
	END IF;
END
go
SET SCHEMA AIASEXT
go

/********************* Converted SQL code starts here:*************************/

/*
 * This file was extracted from 'C:/HANAMigrations/AIASG/OracleObjects/ext_DDL.sql'
 * at 05-Jun-2024 11:42:21 with the 'extract_offline' command of SAP Advanced SQL Migration v.3.5.3 (64791)
 * User config setting for 'extract_offline' (id=132) was '0'.
 */

--********** Creating library 'AIASEXT.SA_STAGEHOOK' ********************
go

CALL SQLSCRIPT_PRINT:PRINT_LINE( 'Creating library ''AIASEXT.SA_STAGEHOOK''...' );
go

CREATE OR REPLACE LIBRARY AIASEXT.SA_STAGEHOOK
LANGUAGE SQLSCRIPT
AS
BEGIN
    /* ORIGSQL: CREATE OR REPLACE PACKAGE BODY AIASEXT.SA_STAGEHOOK as */

    -- v_eot date := constantspkg.cEndOfTime;
    PRIVATE VARIABLE v_eot TIMESTAMP;  /* ORIGSQL: v_eot date ; */


/* The procedure AIASEXT.SA_STAGEHOOK:dbmtk_init_session_global initializes the package/library variables */ 

--********** Creating procedure 'AIASEXT.SA_STAGEHOOK:dbmtk_init_session_global' ********************
PUBLIC PROCEDURE dbmtk_init_session_global
()
/*READS SQL DATA*/ -- this procedure cannot be read-only
AS
BEGIN
    DECLARE init_timestamp VARCHAR(50) := TO_VARCHAR(CURRENT_TIMESTAMP);
    /* do not execute further if package already initialized */
    IF SESSION_CONTEXT('DBMTK_PKG_INIT_AIASEXT_DBMTK_SA_STAGEHOOK__DBMTK_INIT_SESSION_GLOBAL') IS NOT NULL
    THEN
        RETURN;
    END IF;

    /* mark package as initialized */
    SET SESSION 'DBMTK_PKG_INIT_AIASEXT_DBMTK_SA_STAGEHOOK__DBMTK_INIT_SESSION_GLOBAL' = :init_timestamp;
    
    BEGIN
        /* Next lines imported from package header (AIASEXT.SA_STAGEHOOK.PACKAGE.plsql): */

        -- v_eot date := constantspkg.cEndOfTime;

        v_eot = sapdbmtk.sp_f_dbmtk_format_string_to_datetime('01-jan-2200','dd-mon-yyyy');  /* ORIGSQL: to_date('01-jan-2200','dd-mon-yyyy') */
    END;
END;

--********** Creating procedure 'AIASEXT.SA_STAGEHOOK:run' ********************
/* ORIGSQL: procedure run (i_stage varchar2, i_mode varchar2 := null, i_period varchar2 := null, i_periodSeq integer := null, i_userName varchar2 := null, i_calendar varchar2 := null, i_calendarSeq integer := nul(...) */
PUBLIC PROCEDURE run
(
    IN i_stage VARCHAR(255),   /* RESOLVE: Manual edits required: VARCHAR2 parameter(no length): user-configured length=255; adjust as needed */
                               /* ORIGSQL: i_stage varchar2 */
    IN i_mode VARCHAR(255) DEFAULT NULL,   /* RESOLVE: Manual edits required: VARCHAR2 parameter(no length): user-configured length=255; adjust as needed */
                                           /* ORIGSQL: i_mode varchar2 := null */
    IN i_period VARCHAR(255) DEFAULT NULL,   /* RESOLVE: Manual edits required: VARCHAR2 parameter(no length): user-configured length=255; adjust as needed */
                                             /* ORIGSQL: i_period varchar2 := null */
    IN i_periodSeq BIGINT DEFAULT NULL,   /* ORIGSQL: i_periodSeq integer := null */
    IN i_userName VARCHAR(255) DEFAULT NULL/* -- i_group             varchar2 := null, */
/* -- i_tracing           varchar2 := null, */
,/* -- i_connection        varchar2 := null, */     /* RESOLVE: Manual edits required: VARCHAR2 parameter(no length): user-configured length=255; adjust as needed */
                                                                    /* ORIGSQL: i_userName varchar2 := null */
    IN i_calendar VARCHAR(255) DEFAULT NULL,   /* RESOLVE: Manual edits required: VARCHAR2 parameter(no length): user-configured length=255; adjust as needed */
                                               /* ORIGSQL: i_calendar varchar2 := null */
    IN i_calendarSeq BIGINT DEFAULT NULL,   /* ORIGSQL: i_calendarSeq integer := null */
    IN i_processingUnitSeq BIGINT DEFAULT NULL     /* ORIGSQL: i_processingUnitSeq integer := null */
)
SQL SECURITY DEFINER
/*READS SQL DATA*/ -- this procedure cannot be read-only
AS
BEGIN
    /* sapdbmtk: one or more DECLARE statements below were moved upwards, before the first executable statement */
    DECLARE v_sql VARCHAR(1000);  /* ORIGSQL: v_sql varchar2(1000); */
    DECLARE v_periodRow cs_period%rowtype;;/* NOT CONVERTED! */  /* RESOLVE: Identifier not found: Table 'AIASEXT.cs_period' not found (for %ROWTYPE declaration) */
    DECLARE v_uapu BIGINT = 38280596832649217;  /* ORIGSQL: v_uapu integer := 38280596832649217; */

    /* ORIGSQL: for x in (select * from sa_stagehook_ref where stage = i_stage and active = 1 and effectivestartdate <= v_periodRow.startDate and effectiveenddate >= v_periodRow.endDate and (processingunitseq = nvl(i(...) */
    DECLARE CURSOR dbmtk_cursor_106711
    FOR
        SELECT   /* ORIGSQL: select * from sa_stagehook_ref where stage = i_stage and active = 1 and effectivestartdate <= v_periodRow.startDate and effectiveenddate >= v_periodRow.endDate and (processingunitseq = nvl(i_processin(...) */
            *
        FROM
            sa_stagehook_ref
        WHERE
            stage = :i_stage
            AND active = 1
            AND effectivestartdate <= v_periodRow.startDate
            AND effectiveenddate >= v_periodRow.endDate
            AND (processingunitseq = IFNULL(:i_processingUnitSeq, :v_uapu)  /* ORIGSQL: nvl(i_processingUnitSeq, v_uapu) */
            OR processingunitseq = 0)
        ORDER BY
            call_order;

    --constantspkg.cUnassignedPUSeq;

    /* ORIGSQL: log('Start') */
    CALL log('Start');

    /* ORIGSQL: log('inputs:' ||' i_stage='||to_string_null(i_stage) ||',i_mode=' ||to_string_null(i_mode) ||',i_period=' ||to_string_null(i_period) ||',i_periodSeq=' ||to_string_null(i_periodSeq) ||',i_userName=' ||(...) */
    CALL log('inputs:'||' i_stage='||IFNULL(to_string_null(:i_stage),'') ||',i_mode='||IFNULL(to_string_null(:i_mode),'') ||',i_period='||IFNULL(to_string_null(:i_period),'') ||',i_periodSeq='||IFNULL(to_string_null_dbmtkoverloaded_1(:i_periodSeq),'') ||',i_userName='||IFNULL(to_string_null(:i_userName),'') ||',i_calendar='||IFNULL(to_string_null(:i_calendar),'') ||',i_calendarSeq='||IFNULL(to_string_null_dbmtkoverloaded_1(:i_calendarSeq),'') ||',i_processingUnitSeq='||IFNULL(to_string_null_dbmtkoverloaded_1(:i_processingUnitSeq),'') /* --  ||',i_group='||to_string_null(i_group) */  /* ORIGSQL: to_string_null(i_processingUnitSeq) */

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    /* ORIGSQL: to_string_null(i_calendarSeq) */
        /* -- ||',i_tracing='||to_string_null(i_tracing) */
        /* -- ||',i_connection='||to_string_null(i_connection) */);

    v_periodRow = get_period_row(:i_periodSeq);

    FOR x AS dbmtk_cursor_106711
    DO
        v_sql = :x.call_text;

        /* Substitute the variables */

        v_sql = sapdbmtk.sp_f_dbmtk_string_replace(:v_sql, '<stage>', to_string_null(:i_stage));  /* ORIGSQL: replace(v_sql, '<stage>', to_string_null(i_stage)) */

        v_sql = sapdbmtk.sp_f_dbmtk_string_replace(:v_sql, '<mode>', to_string_null(:i_mode));  /* ORIGSQL: replace(v_sql, '<mode>', to_string_null(i_mode)) */

        v_sql = sapdbmtk.sp_f_dbmtk_string_replace(:v_sql, '<period>', to_string_null(:i_period));  /* ORIGSQL: replace(v_sql, '<period>', to_string_null(i_period)) */

        v_sql = sapdbmtk.sp_f_dbmtk_string_replace(:v_sql, '<periodSeq>', to_string_null_dbmtkoverloaded_1(:i_periodSeq));  /* ORIGSQL: replace(v_sql, '<periodSeq>', to_string_null(i_periodSeq)) */

        -- v_sql := replace(v_sql, '<group>', to_string_null(i_group));
        -- v_sql := replace(v_sql, '<tracing>', to_string_null(i_tracing));
        -- v_sql := replace(v_sql, '<connection>', to_string_null(i_connection));

        v_sql = sapdbmtk.sp_f_dbmtk_string_replace(:v_sql, '<userName>', to_string_null(:i_userName));  /* ORIGSQL: replace(v_sql, '<userName>', to_string_null(i_userName)) */

        v_sql = sapdbmtk.sp_f_dbmtk_string_replace(:v_sql, '<calendar>', to_string_null(:i_calendar));  /* ORIGSQL: replace(v_sql, '<calendar>', to_string_null(i_calendar)) */

        v_sql = sapdbmtk.sp_f_dbmtk_string_replace(:v_sql, '<calendarSeq>', to_string_null_dbmtkoverloaded_1(:i_calendarSeq));  /* ORIGSQL: replace(v_sql, '<calendarSeq>', to_string_null(i_calendarSeq)) */

        v_sql = sapdbmtk.sp_f_dbmtk_string_replace(:v_sql, '<processingUnitSeq>', to_string_null_dbmtkoverloaded_1(:i_processingUnitSeq));  /* ORIGSQL: replace(v_sql, '<processingUnitSeq>', to_string_null(i_processingUnitSeq)) */

        /* ORIGSQL: log('Attempting to execute: "' || v_sql || '"') */
        CALL log('Attempting to execute: "'|| IFNULL(:v_sql,'') || '"');
        BEGIN 
            DECLARE EXIT HANDLER FOR SQLEXCEPTION
                /* ORIGSQL: when others then */
                BEGIN
                    /* ORIGSQL: log('Error:"' || DBMS_UTILITY.FORMAT_ERROR_STACK || chr(30) || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE) */
                    CALL log('Error:"'|| DBMS_UTILITY.FORMAT_ERROR_STACK || IFNULL(CHAR(30),'') || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE   /* RESOLVE: Standard Package call(not converted): 'DBMS_UTILITY.FORMAT_ERROR_STACK' not supported, manual conversion required */
                        );  /* RESOLVE: Standard Package call(not converted): 'DBMS_UTILITY.FORMAT_ERROR_BACKTRACE' not supported, manual conversion required */
                            /* ORIGSQL: chr(30) */

                    /* ORIGSQL: raise; */
                    RESIGNAL;
                END;



            /* RESOLVE: Dynamically generated SQL: Dynamically generated SQL, as executed by Execute-Immediate, convert manually */
            /* ORIGSQL: execute immediate v_sql; */
            EXECUTE IMMEDIATE :v_sql;

            /* ORIGSQL: exception when others then */
        END;

        /* ORIGSQL: log('Successfully executed: "' || v_sql || '"') */
        CALL log('Successfully executed: "'|| IFNULL(:v_sql,'') || '"');
    END FOR;  /* ORIGSQL: end loop; */

    /* ORIGSQL: log('End') */
    CALL log('End');
END;

--********** Creating procedure 'AIASEXT.SA_STAGEHOOK:log' ********************
/* ORIGSQL: procedure log(i_text varchar2, i_value number := null) is BEGIN AUTONOMOUS TRANSACTION v_owner varchar2(30); */
PUBLIC PROCEDURE log
(
    IN i_text VARCHAR(255),   /* RESOLVE: Manual edits required: VARCHAR2 parameter(no length): user-configured length=255; adjust as needed */
                              /* ORIGSQL: i_text varchar2 */
    IN i_value DECIMAL(38,10) DEFAULT NULL     /* ORIGSQL: i_value number := null */
)
SQL SECURITY DEFINER
/*READS SQL DATA*/ -- this procedure cannot be read-only
AS
BEGIN
    /* sapdbmtk: one or more DECLARE statements below were moved upwards, before the first executable statement */
    DECLARE v_owner VARCHAR(30);  /* ORIGSQL: v_owner varchar2(30); */
    DECLARE v_name VARCHAR(30);  /* ORIGSQL: v_name varchar2(30); */
    DECLARE v_lineno DECIMAL(38,10);  /* ORIGSQL: v_lineno number; */
    DECLARE v_caller_t VARCHAR(10000);  /* ORIGSQL: v_caller_t varchar2(10000); */

    /* ORIGSQL: pragma autonomous_transaction; */
    BEGIN AUTONOMOUS TRANSACTION
        owa_util.who_called_me (:v_owner, :v_name, :v_lineno, :v_caller_t);;/* NOT CONVERTED! */  /* RESOLVE: Standard Package call(not converted): 'owa_util.who_called_me' not supported, manual conversion required */

        /* ORIGSQL: insert into cs_debug_Custom (text, value) values (v_owner||'.'||v_name||'[' ||LPAD(to_char(v_lineno),5,'0') ||']:' ||i_text, i_value); */
        INSERT INTO cs_debug_Custom
            (
                text, value
            )
        VALUES (
                IFNULL(:v_owner,'')||'.'||IFNULL(:v_name,'')||'[' ||IFNULL(LPAD(TO_VARCHAR(:v_lineno),5,'0'),'') ||']:' ||IFNULL(:i_text,''),  /* ORIGSQL: to_char(v_lineno) */
                :i_value
        );

        /* ORIGSQL: commit; */
        COMMIT;
    END;
END;

--********** Creating function 'AIASEXT.SA_STAGEHOOK:to_string_null' ********************
/* ORIGSQL: function to_string_null(i_string varchar2) return varchar2 is begin */
PUBLIC FUNCTION to_string_null
(
    IN i_string VARCHAR(255)   /* RESOLVE: Manual edits required: VARCHAR2 parameter(no length): user-configured length=255; adjust as needed */
                               /* ORIGSQL: i_string varchar2 */
)
RETURNS dbmtk_function_result VARCHAR(255)   /* ORIGSQL: return varchar2 */
/* RESOLVE: Manual edits required: VARCHAR2 function value(no length): user-configured length=255; adjust as needed */
SQL SECURITY DEFINER
AS
BEGIN
    IF :i_string IS NULL
    THEN 
        dbmtk_function_result = 'null';
        RETURN;
    ELSE  
        dbmtk_function_result = ''''||IFNULL(:i_string,'')||'''';
        RETURN;
    END IF;
END;

--********** Creating function 'AIASEXT.SA_STAGEHOOK:to_string_null_dbmtkoverloaded_1' ********************
/* ORIGSQL: function to_string_null(i_number number) return varchar2 is begin */
/* sapdbmtk: SQL Function declaration 'to_string_null' is overloaded, renamed to 'to_string_null_dbmtkoverloaded_1' */
PRIVATE FUNCTION to_string_null_dbmtkoverloaded_1
(
    IN i_number DECIMAL(38,10)   /* ORIGSQL: i_number number */
)
RETURNS dbmtk_function_result VARCHAR(255)   /* ORIGSQL: return varchar2 */
/* RESOLVE: Manual edits required: VARCHAR2 function value(no length): user-configured length=255; adjust as needed */
SQL SECURITY DEFINER
AS
BEGIN
    IF :i_number IS NULL
    THEN 
        dbmtk_function_result = 'null';
        RETURN;
    ELSE  
        dbmtk_function_result = TO_VARCHAR(:i_number);  /* ORIGSQL: to_char(i_number) */
        RETURN;
    END IF;
END;

--********** Creating function 'AIASEXT.SA_STAGEHOOK:get_period_row' ********************
/* ORIGSQL: function get_period_row(i_periodSeq integer) return cs_period%rowtype is v_return cs_period%rowtype; */
PUBLIC FUNCTION get_period_row
(
    IN i_periodSeq BIGINT     /* ORIGSQL: i_periodSeq integer */
)
RETURNS dbmtk_function_result cs_period%rowtype   /* RESOLVE: SQL Function result datatype not supported: Function result datatype (%ROWTYPE record cs_period%rowtype) not supported; rewrite algorithm */
                                                  /* RESOLVE: Identifier not found: Table 'AIASEXT.cs_period' not found (for %ROWTYPE declaration) */
                                                  /* RESOLVE: Datatype unresolved: Function result datatype (cs_period%rowtype) not resolved for function 'AIASEXT.SA_STAGEHOOK:get_period_row' */
SQL SECURITY DEFINER
AS
BEGIN
    /* initialize library variables, if not yet done */
    CALL dbmtk_init_session_global();

    v_return cs_period%rowtype;;/* NOT CONVERTED! */
    BEGIN 
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
            /* ORIGSQL: when others then */
            BEGIN
                /* ORIGSQL: raise; */
                RESIGNAL;
            END;


        /* RESOLVE: Identifier not found: Table/view 'AIASEXT.CS_PERIOD' not found */

        SELECT *
        INTO
            v_return
        FROM
            cs_period
        WHERE
            removedate = :v_eot
            AND periodSeq = :i_periodSeq;

        /* ORIGSQL: exception when others then */
    END;

    dbmtk_function_result = v_return;
    RETURN;
END;

/* ORIGSQL: end; */
END;/* end of library */
go

CALL sapdbmtk.sp_dbmtk_object_install_custom('library', 'AIASEXT', 'SA_STAGEHOOK');
go

/*
 * end of 'AIASEXT.SA_STAGEHOOK.PACKAGE-BODY.sqlscript'
 */
go

