-- tables KYN_
-- library KYN_LIB_
-- proc KYN_SP_
-- func KYN_FNC_
-- sent WebIDe
-- diagram, 
-- SQL, 
-- setup teams access - DONE
-- check with Stefan on sprint deliverable
-- add the library for pipeline runs

-- Deepan is 5.5 hours diff

-- tracking table
drop table jc_quota_sync;

create table jc_quota_sync (
run_key bigint not null primary key generated by default as identity,
run_date timestamp default current_timestamp,
territoryprogramseq bigint not null,
territoryprogram_name varchar(127),
territoryprogram_esd date,
territoryprogram_eed date,
territoryprogram_periodtype varchar(50),
territoryprogram_calendar varchar(50),
territoryprogram_periodseq bigint,
territoryprogram_period varchar(50),
semiannual_periodseq bigint,
semiannual_name varchar(50),
stagequota_batchname varchar(255),
process_flag tinyint default 0 not null
);


-- workflow or trigger adds entries to tracking table
insert into jc_quota_sync (
territoryprogramseq, 
territoryprogram_name, 
territoryprogram_esd,
territoryprogram_eed,
territoryprogram_periodtype,
territoryprogram_calendar,
territoryprogram_periodseq,
territoryprogram_period,
stagequota_batchname)
select 
tp.territoryprogramseq, 
tp.name, 
cast(tp.effectivestartdate as date) as esd,
cast(tp.effectiveenddate as date) as eed,
pt.name as periodtype,
cal_tp.name as calendar,
per_tp.periodseq as periodseq,
per_tp.name as period,
'JC_TEST#'||to_char(current_timestamp, 'YYYYMMDD_HH24MISS') AS stagequota_batchname
from csq_territoryprogram tp
left outer join cs_periodtype pt on tp.periodtypeseq = pt.periodtypeseq and pt.removedate= '2200-01-01'
left outer join cs_period per_tp on tp.periodseq = per_tp.periodseq and per_tp.removedate= '2200-01-01'
left outer join cs_calendar cal_tp on per_tp.calendarseq = cal_tp.calendarseq and cal_tp.removedate = '2200-01-01'
where tp.removedate = '2200-01-01'
and tp.islast = 1
--and tp.name = 'FY24H1_PR_Plan_Germany_INTERNAL_ONLY'
;

-- set semi annual details and batch
update jc_quota_sync x
set x.stagequota_batchname = x.stagequota_batchname || '#' || x.run_key, -- make this unique
(x.semiannual_periodseq, x.semiannual_name) = (
	select y.periodseq, y.name from cs_period y
	where y.removedate = '2200-01-01'
	and y.parentseq = x.territoryprogram_periodseq
	and ((y.name like 'HY1%' and x.territoryprogram_name like 'FY__H1%') or (y.name like 'HY2%' and x.territoryprogram_name like 'FY__H2%'))
);


-- create table with quotas from the programs
drop table jc_tq_quota;

create table jc_tq_quota as (
select
  run_key,
/*  tp.name as program,
  cast(tp.effectivestartdate as date) as program_esd,
  cast(tp.effectiveenddate as date) as program_eed,
  pt.name as program_periodtype,
  cal_tp.name as program_calendar,
  per_tp.periodseq as program_periodseq,
  per_tp.name as program_period,*/
  t.name as territory,
  cast(t.effectivestartdate as date) as territory_esd,
  cast(t.effectiveenddate as date) as territory_eed,  
  tt.targettypeid,
  cast(tq.effectivestartdate as date) as quota_esd,
  cast(tq.effectiveenddate as date) as quota_eed,  
  tq.quotavalue,
  ut_tq.name as unittype,
  tq.finalquotavalue,
  tq.casestatus as quota_casestatus,
  cast(tpos.effectivestartdate as date) as tpos_esd,
  cast(tpos.effectiveenddate as date) as tpos_eed,
  tpos.split,
  tpos.positionseq,
  pos.name as position,
  pos.payeeseq,
  pay.payeeid
from --CSQ_TerritoryProgram tp
--join 
jc_quota_sync jc --on tp.territoryseq = jc.territoryprogramseq and jc.process_flag = 0
--left outer join cs_periodtype pt on tp.periodtypeseq = pt.periodtypeseq and pt.removedate= '2200-01-01'
--left outer join cs_period per_tp on tp.periodseq = per_tp.periodseq and per_tp.removedate= '2200-01-01'
--left outer join cs_calendar cal_tp on per_tp.calendarseq = cal_tp.calendarseq and cal_tp.removedate = '2200-01-01'
left outer join csq_territory t on 
  jc.territoryprogramseq = t.territoryprogramseq
  and t.removedate = '2200-01-01'
  and t.effectivestartdate < jc.territoryprogram_eed --effectiveenddate
  and t.effectiveenddate > jc.territoryprogram_esd -- jc.effectivestartdate 
left outer join csq_territoryquota tq on 
  tq.territoryseq = t.territoryseq 
  and tq.removedate= '2200-01-01' 
  and tq.effectivestartdate < t.effectiveenddate
  and tq.effectiveenddate > t.effectivestartdate 
left outer join csq_targettype tt on tq.targettypeseq = tt.datatypeseq and tt.removedate= '2200-01-01'
left outer join cs_unittype ut_tq on tq.unittypeforquotavalue = ut_tq.unittypeseq and ut_tq.removedate = '2200-01-01'
left outer join csq_territoryposition tpos on 
  tpos.territoryseq = t.territoryseq 
  and tpos.removedate = '2200-01-01' 
  and tpos.effectivestartdate < t.effectiveenddate
  and tpos.effectiveenddate > t.effectivestartdate 
left outer join cs_position pos on 
  tpos.positionseq = pos.ruleelementownerseq 
  and pos.removedate = '2200-01-01'
  and pos.effectivestartdate < tpos.effectiveenddate
  and pos.effectiveenddate >= tpos.effectiveenddate
left outer join cs_payee pay on
  pos.payeeseq = pay.payeeseq
  and pay.removedate = '2200-01-01'
  and pay.effectivestartdate < pos.effectiveenddate
  and pay.effectiveenddate >= pos.effectiveenddate
where jc.process_flag = 0
 --tp.removedate = '2200-01-01'
);

delete from jc_tq_quota where positionseq is null or targettypeid is null;

/*
alter table jc_tq_quota add (semiannual_periodseq bigint, semiannual_name varchar(50));

-- decide the semi annual period
update jc_tq_quota x
set (x.semiannual_periodseq, x.semiannual_name) = (
	select y.periodseq, y.name from cs_period y
	where y.removedate = '2200-01-01'
	and y.parentseq = x.program_periodseq
	and ((y.name like 'HY1%' and x.program like 'FY__H1%') or (y.name like 'HY2%' and x.program like 'FY__H2%'))
);
*/

-- create a prestage table
drop table  jc_prestage_quota;

create table jc_prestage_quota as (
select * from (
select
per.startdate as effectivestartdate,
per.enddate as effectiveenddate,
case jc.targettypeid
when 'GP' then 'Q_Profit'
else 'Q_'||jc.targettypeid
end as quotaname,
sum(jc.quotavalue) as value,
jc.unittype as unittypeforvalue,
pt.name as periodtypename,
null as businessunitmap,
jc.position as positionname,
qs.stagequota_batchname as batchname
from jc_tq_quota jc
join jc_quota_sync qs on jc.run_key = qs.run_key
join cs_period per on qs.semiannual_periodseq = per.periodseq and per.removedate = '2200-01-01'
join cs_periodtype pt on per.periodtypeseq = pt.periodtypeseq and pt.removedate = '2200-01-01'
group by per.startdate, per.enddate, jc.targettypeid, jc.unittype, pt.name, jc.position, qs.stagequota_batchname
) x
where exists (select 1 from cs_quota q where q.removedate ='2200-01-01' and x.quotaname = q.name)
);



drop table jc_com_quota;

-- commissions quotas
create table jc_com_quota as (
select
per.startdate as effectivestartdate, per.enddate as effectiveenddate,
quo.name quotaname, fv.value, ut.name as unittypeforvalue, pt.name periodtypename, 
null as businessunitmap, pos.name positionname
from 
cs_quota quo
join cs_calendar cal on quo.calendarseq = cal.calendarseq and cal.removedate = to_date('22000101','yyyymmdd') 
--left outer join cs_businessunit bu on bitand(quo.businessunitmap,bu.mask) > 0
join cs_unittype ut on quo.unittypeseq = ut.unittypeseq and ut.removedate = to_date('22000101','yyyymmdd')
join cs_quota_variables qv on
  quo.quotaseq = qv.quotaseq
  and qv.effectivestartdate < quo.effectiveenddate
  and qv.effectiveenddate > quo.effectivestartdate
  and qv.removedate = to_date('22000101','yyyymmdd')
  and quo.removedate = to_date('22000101','yyyymmdd')
  and qv.modelseq = 0
join cs_variableassignment vas on
  qv.variableseq = vas.variableseq
  and qv.effectivestartdate < vas.effectiveenddate
  and qv.effectiveenddate > vas.effectivestartdate
  and vas.removedate = to_date('22000101','yyyymmdd')
  and vas.modelseq = 0
join cs_fixedvalue fv on
  fv.ruleelementseq = vas.assignmentseq
  and fv.effectivestartdate < vas.effectiveenddate
  and fv.effectiveenddate > vas.effectivestartdate 
  and fv.removedate = to_date('22000101','yyyymmdd')
  and fv.modelseq = 0
join cs_periodtype pt on 
  fv.periodtypeseq = pt.periodtypeseq
  and pt.removedate = to_date('22000101','yyyymmdd')
join cs_position pos on
  pos.ruleelementownerseq = vas.ruleelementownerseq 
  and pos.effectiveenddate   >= fv.effectiveenddate 
  and pos.effectivestartdate <  fv.effectiveenddate
  and pos.removedate = to_date('22000101','yyyymmdd')
  and pos.effectivestartdate = vas.effectivestartdate
join cs_period per on
  fv.periodtypeseq = per.periodtypeseq
  and per.startdate < fv.effectiveenddate
  and per.enddate > fv.effectivestartdate
  and per.removedate = to_date('22000101','yyyymmdd')
  and per.calendarseq = cal.calendarseq
join cs_processingunit pu on
  pos.processingunitseq = pu.processingunitseq  
where quo.modelseq = 0
);

-- differences comparison
select * from jc_prestage_quota
where (effectivestartdate, effectiveenddate, quotaname, value, unittypeforvalue, periodtypename, businessunitmap,positionname ) 
not in (select * from jc_com_quota);

delete from cs_stagequota where batchname like 'JC_TEST%'; -- and stageprocessflag = 0;

-- then insert into stage the differences 
-- we use one batch and set the stageprocess flag to 2 -- THIS DOES NOT WORK
-- I tried using flag 1 and it just revalidates all the records
-- we must update the batch of all the records eligible for import and then import them - we put the batchname into description to tie the records back
insert into cs_stagequota
(tenantid, stagequotaseq, effectivestartdate, effectiveenddate, quotaname, value, unittypeforvalue, periodtypename, businessunitmap, positionname, batchname, stageprocessflag, description)
select '1681' as tenantid,
(select max(stagequotaseq) from cs_stagequota) + row_number() over (order by quotaname, positionname) as stagequotaseq,
jc.*, 0 as stageprocessflag, 
jc.batchname as description
from jc_prestage_quota jc
where (effectivestartdate, effectiveenddate, quotaname, value, unittypeforvalue, periodtypename, businessunitmap,positionname ) 
not in (select * from jc_com_quota);

commit;

select * from cs_stagequota order by 2 desc;

-- IPL generate needs to use the stage records for the latest batch in the stage table -- we need a function to provide the details
-- minimum quota LT_Minimum_Quota
-- please see https://blogs.sap.com/2023/01/24/display-custom-data-in-a-spm-plan-communicator-document/
-- COnfirm with Peter how we should do this
select * from (
select rank() over (order by jc.run_key desc) as rn, x.*
from cs_stagequota x
join jc_quota_sync jc on x.description = jc.stagequota_batchname
where x.positionname = 'PL2006_MGRMCE_001'
and semiannual_name = 'HY1 2023'
) where rn = 1;


-- when IPL is accepted then import the stage records for the position
-- stage records
select max(stagequotaseq) as maxseq, batchname, stageprocessflag, count(*) 
from cs_stagequota 
where batchname like 'JC_TEST%' 
and stageprocessflag = 0
group by batchname, stageprocessflag
order by 1 desc;

-- plan communicator
select pos.name as position, dp.batchname, dt.name dt_name, dp.name dp_name, dp.status, dp.startdate, dp.enddate, dp.generatedate, dp.acceptdate
from csp_documentprocess dp
join csp_documentassignment da on dp.documentprocesstemplateseq = da.documentprocesstemplateseq and da.removedate = '2200-01-01'
join csp_documenttemplate dt on da.documenttemplateseq = dt.documenttemplateseq and dt.removedate = '2200-01-01'
join cs_position pos on dp.positionseq = pos.ruleelementownerseq 
and pos.removedate = '2200-01-01' 
and pos.effectivestartdate < dp.enddate and pos.effectiveenddate >= dp.enddate;

-- the link is the batch with max date prior to the generation date of the document
select sq.positioname, max(sq.batchname) as batchname
from (
select distinct batchname, positionname, to_seconddate(substr(batchname, instr(batchname, '#',-1)+1),'YYYYMMDD_HH24MISS') as stagedate
from cs_stagequota
) sq
join csp_documentprocess dp on 
  dp.generatedate >= sq.stagedate -- generated after the stage records were created
join cs_position pos on 
  dp.positionseq = pos.ruleelementownerseq
  and pos.removedate = '2200-01-01'
  and pos.effectivestartdate < dp.enddate
  and pos.effectiveenddate >= dp.enddate
  and pos.name = sq.positionname
where sq.batchname like 'JC_TEST#%'
group by sq.positioname;

-- after the semi annual quotas have been imported we need to ensure the annual quotas are correct - this can be done purely on commissions data - i.e. take both halves of the year and agregate up to annual. Check with Peter if this is correct.

-- TP3 and TP4 will now be split into multiple programs due to a security issue with T&Q

-- work with deepan.shanmugam.chandrasekar@sap.com



/************
 * Queries *
 ***********/


-- to get semi annual values we don't need the granular values
select
  tp.name as program,
  cast(tp.effectivestartdate as date) as tp_esd,
  cast(tp.effectiveenddate as date) as tp_eed,
  pt.name as program_periodtype,
  per_tp.name as program_period,
  t.name as territory,
  cast(t.effectivestartdate as date) as t_esd,
  cast(t.effectiveenddate as date) as t_eed,  
  tt.targettypeid,
  tq.quotavalue,
  tq.finalquotavalue,
  tq.casestatus,
  cast(tq.effectivestartdate as date) as tq_esd,
  cast(tq.effectiveenddate as date) as tq_eed,
  cast(tpos.effectivestartdate as date) as tpos_esd,
  cast(tpos.effectiveenddate as date) as tpos_eed,
  tpos.split,
  pos.name as position,
  cast(pos.effectivestartdate as date) as pos_esd,
  cast(pos.effectiveenddate as date) as pos_eed,
  pos.payeeseq,
  pay.payeeid,
  cast(pay.effectivestartdate as date) as pay_esd,
  cast(pay.effectiveenddate as date) as pay_eed
from CSQ_TerritoryProgram tp
left outer join cs_periodtype pt on tp.periodtypeseq = pt.periodtypeseq and pt.removedate= '2200-01-01'
left outer join cs_period per_tp on tp.periodseq = per_tp.periodseq and per_tp.removedate= '2200-01-01'
left outer join csq_territory t on 
  tp.territoryprogramseq = t.territoryprogramseq
  and t.removedate = '2200-01-01'
  and t.effectivestartdate < tp.effectiveenddate
  and t.effectiveenddate > tp.effectivestartdate 
left outer join csq_territoryquota tq on 
  tq.territoryseq = t.territoryseq 
  and tq.removedate= '2200-01-01' 
  and tq.effectivestartdate < t.effectiveenddate
  and tq.effectiveenddate > t.effectivestartdate 
left outer join csq_targettype tt on tq.targettypeseq = tt.datatypeseq and tt.removedate= '2200-01-01'
left outer join cs_unittype ut_tq on tq.unittypeforquotavalue = ut_tq.unittypeseq and ut_tq.removedate = '2200-01-01'
left outer join csq_territoryposition tpos on 
  tpos.territoryseq = t.territoryseq 
  and tpos.removedate = '2200-01-01' 
  and tpos.effectivestartdate < t.effectiveenddate
  and tpos.effectiveenddate > t.effectivestartdate 
left outer join cs_position pos on 
  tpos.positionseq = pos.ruleelementownerseq 
  and pos.removedate = '2200-01-01'
  and pos.effectivestartdate < tpos.effectiveenddate
  and pos.effectiveenddate >= tpos.effectiveenddate
left outer join cs_payee pay on
  pos.payeeseq = pay.payeeseq
  and pay.removedate = '2200-01-01'
  and pay.effectivestartdate < pos.effectiveenddate
  and pay.effectiveenddate >= pos.effectiveenddate
  where tp.removedate = '2200-01-01'
  and tp.name = 'FY24H1_AM_Seller_WW_DI'
  and t.name = 'SellerAMRole0033'
  and pos.name = 'PL1001_Iberia'
  --  and per.name = 'April 2022'
  --and tqc.isquotasetting = 0 -- prevent duplicates
  --and tqc.periodseq is not null
  --and tqc.value is not null -- only values  
  --and tt.targettypeid = 'Revenue'
  --and per.periodtypeseq = tp.periodtypeseq -- only quota cell values for the relevant periodtype
  --and exists (select 1 from cs_quota q where q.removedate = '2200-01-01' and q.name = tt.targettypeid)
  order by tp.name, per_tp.name, t.name, tt.targettypeid, pos.name;

-- T&Q quotas breakdown
select
  tp.name as program,
  cast(tp.effectivestartdate as date) as tp_esd,
  cast(tp.effectiveenddate as date) as tp_eed,
  pt.name as program_periodtype,
  per_tp.name as program_period,
  t.name as territory,
  cast(t.effectivestartdate as date) as t_esd,
  cast(t.effectiveenddate as date) as t_eed,  
  tt.targettypeid,
  tq.quotavalue,
  tq.finalquotavalue,
  tq.casestatus,
  cast(tq.effectivestartdate as date) as tq_esd,
  cast(tq.effectiveenddate as date) as tq_eed,
  per.name as tqc_period,  
  cast(tqc.effectivestartdate as date) as tqc_esd,
  cast(tqc.effectiveenddate as date) as tqc_eed,
  tqc.value as tqc_value,
  ut_tqc.name as tqc_unittype,
  tqc.isquotasetting,
  cast(tpos.effectivestartdate as date) as tpos_esd,
  cast(tpos.effectiveenddate as date) as tpos_eed,
  tpos.split,
  pos.name as position,
  cast(pos.effectivestartdate as date) as pos_esd,
  cast(pos.effectiveenddate as date) as pos_eed,
  pos.payeeseq,
  pay.payeeid,
  cast(pay.effectivestartdate as date) as pay_esd,
  cast(pay.effectiveenddate as date) as pay_eed
from CSQ_TerritoryProgram tp
left outer join cs_periodtype pt on tp.periodtypeseq = pt.periodtypeseq and pt.removedate= '2200-01-01'
left outer join cs_period per_tp on tp.periodseq = per_tp.periodseq and per_tp.removedate= '2200-01-01'
left outer join csq_territory t on 
  tp.territoryprogramseq = t.territoryprogramseq
  and t.removedate = '2200-01-01'
  and t.effectivestartdate < tp.effectiveenddate
  and t.effectiveenddate > tp.effectivestartdate 
left outer join csq_territoryquota tq on 
  tq.territoryseq = t.territoryseq 
  and tq.removedate= '2200-01-01' 
  and tq.effectivestartdate < t.effectiveenddate
  and tq.effectiveenddate > t.effectivestartdate 
left outer join csq_targettype tt on tq.targettypeseq = tt.datatypeseq and tt.removedate= '2200-01-01'
left outer join cs_unittype ut_tq on tq.unittypeforquotavalue = ut_tq.unittypeseq and ut_tq.removedate = '2200-01-01'
left outer join csq_territoryposition tpos on 
  tpos.territoryseq = t.territoryseq 
  and tpos.removedate = '2200-01-01' 
  and tpos.effectivestartdate < t.effectiveenddate
  and tpos.effectiveenddate > t.effectivestartdate 
left outer join cs_position pos on 
  tpos.positionseq = pos.ruleelementownerseq 
  and pos.removedate = '2200-01-01'
  and pos.effectivestartdate < tpos.effectiveenddate
  and pos.effectiveenddate >= tpos.effectiveenddate
left outer join cs_payee pay on
  pos.payeeseq = pay.payeeseq
  and pay.removedate = '2200-01-01'
  and pay.effectivestartdate < pos.effectiveenddate
  and pay.effectiveenddate >= pos.effectiveenddate
left outer join csq_territoryquotacell tqc on 
  tqc.territoryquotaseq = tq.territoryquotaseq 
  and tqc.removedate = '2200-01-01' 
  and tqc.effectivestartdate < tq.effectiveenddate
  and tqc.effectiveenddate > tq.effectivestartdate 
left outer join cs_period per on tqc.periodseq = per.periodseq and per.removedate = '2200-01-01'
left outer join cs_unittype ut_tqc on tqc.unittypeforvalue = ut_tqc.unittypeseq and ut_tqc.removedate = '2200-01-01'
  where tp.removedate = '2200-01-01'
  and tp.name = 'FY24H1_AM_Seller_WW_DI'
  and t.name = 'SellerAMRole0033'
  and pos.name = 'PL1001_Iberia'
  --  and per.name = 'April 2022'
  --and tqc.isquotasetting = 0 -- prevent duplicates
  --and tqc.periodseq is not null
  --and tqc.value is not null -- only values  
  --and tt.targettypeid = 'Revenue'
  --and per.periodtypeseq = tp.periodtypeseq -- only quota cell values for the relevant periodtype
  --and exists (select 1 from cs_quota q where q.removedate = '2200-01-01' and q.name = tt.targettypeid)
  order by tp.name, per_tp.name, t.name, tt.targettypeid, pos.name, per.name;
  
  
  
  
-- Commissions Quotas
-- quota period types
select quo.name as quota, qpt.name as periodtype
from cs_quota quo
join cs_quota_variables qv on
  quo.quotaseq = qv.quotaseq
  and qv.effectivestartdate < quo.effectiveenddate
  and qv.effectiveenddate > quo.effectivestartdate
  and qv.removedate = to_date('22000101','yyyymmdd')
  and qv.modelseq = 0
join cs_variable var on
  qv.variableseq = var.ruleelementseq
  and var.effectivestartdate < qv.effectiveenddate
  and var.effectiveenddate > qv.effectivestartdate
  and var.removedate = to_date('22000101','yyyymmdd')
join cs_periodtype qpt on 
  var.periodtypeseq = qpt.periodtypeseq 
  and qpt.removedate = to_date('22000101','yyyymmdd')
where quo.removedate = to_date('22000101','yyyymmdd')
and quo.modelseq = 0
order by 1,2;

-- quotas
select
quo.name quota_name,
--IFNULL(bu.name,to_char(quo.businessunitmap)) as bu_name, 
quo.description,
cal.name as calendar_name,
ut.name as unittype,
pos.name position_name, pu.name as pu_name, 
pos.effectivestartdate, pos.effectiveenddate,
pt.name period_type, per.name period_name, fv.value 
from 
cs_quota quo
join cs_calendar cal on quo.calendarseq = cal.calendarseq and cal.removedate = to_date('22000101','yyyymmdd') 
--left outer join cs_businessunit bu on bitand(quo.businessunitmap,bu.mask) > 0
join cs_unittype ut on quo.unittypeseq = ut.unittypeseq and ut.removedate = to_date('22000101','yyyymmdd')
join cs_quota_variables qv on
  quo.quotaseq = qv.quotaseq
  and qv.effectivestartdate < quo.effectiveenddate
  and qv.effectiveenddate > quo.effectivestartdate
  and qv.removedate = to_date('22000101','yyyymmdd')
  and quo.removedate = to_date('22000101','yyyymmdd')
  and qv.modelseq = 0
join cs_variableassignment vas on
  qv.variableseq = vas.variableseq
  and qv.effectivestartdate < vas.effectiveenddate
  and qv.effectiveenddate > vas.effectivestartdate
  and vas.removedate = to_date('22000101','yyyymmdd')
  and vas.modelseq = 0
join cs_fixedvalue fv on
  fv.ruleelementseq = vas.assignmentseq
  and fv.effectivestartdate < vas.effectiveenddate
  and fv.effectiveenddate > vas.effectivestartdate 
  and fv.removedate = to_date('22000101','yyyymmdd')
  and fv.modelseq = 0
join cs_periodtype pt on 
  fv.periodtypeseq = pt.periodtypeseq
  and pt.removedate = to_date('22000101','yyyymmdd')
join cs_position pos on
  pos.ruleelementownerseq = vas.ruleelementownerseq 
  and pos.effectiveenddate   >= fv.effectiveenddate 
  and pos.effectivestartdate <  fv.effectiveenddate
  and pos.removedate = to_date('22000101','yyyymmdd')
  and pos.effectivestartdate = vas.effectivestartdate
join cs_period per on
  fv.periodtypeseq = per.periodtypeseq
  and per.startdate < fv.effectiveenddate
  and per.enddate > fv.effectivestartdate
  and per.removedate = to_date('22000101','yyyymmdd')
  and per.calendarseq = cal.calendarseq
join cs_processingunit pu on
  pos.processingunitseq = pu.processingunitseq  
where quo.modelseq = 0
  --and per.name like '%2023%'
  and pos.name = 'PL1001_Iberia'
--  and fv.value is not null
--  and pu.name = 'Retail'
--and pos.name like '012345678A_Account Management Partner'
order by quo.name, pos.name, per.startdate, per.periodseq;



-- search for quota seq

create table jc_test (table_name varchar(127), column_name varchar(127), row_count integer);

do begin
declare cursor c_sql for 
select table_name, column_name, 
'insert into jc_test select :1 as table_name, :2 as column_name, count(*) from '||table_name||' where '||column_name||'=39969446692913154'  as sql_text
from table_columns where column_name like '%SEQ' and schema_name='TCMP' and table_name like 'CS$_%' escape '$'
order by table_name, column_name;
delete from jc_test;
for x as c_sql
do
execute immediate :x.sql_text using x.table_name, x.column_name;
end for;
end;