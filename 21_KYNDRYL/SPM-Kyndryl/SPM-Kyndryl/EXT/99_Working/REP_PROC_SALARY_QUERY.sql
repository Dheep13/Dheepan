CREATE or replace PROCEDURE EXT.REP_PROC_SALARY_QUERY (IN in_periodseq NUMBER)
LANGUAGE SQLSCRIPT 
SQL SECURITY INVOKER 
DEFAULT SCHEMA EXT AS

/*---------------------------------------------------------------------
    | Author: Ana S
    | Company: Inycom
    | Initial Version Date: 26-Jan-2023
    |----------------------------------------------------------------------
    | Procedure Purpose: Load in the table REP_SALARY_QUERY the changes in the reference salary that the seller has
    | So we can use this table for the Embedded Analytics report
    | Version: 0.1  26-Jan-2023 Intial Version
    | Version: 1.1  19-Apr-2023 Added ELIGIBILITY, ROW
    | Version: 1.2  25-May-2023 Performance tuning
    |
    -----------------------------------------------------------------------
*/

BEGIN

	DECLARE v_log_count INTEGER;
	DECLARE num_rows NUMBER; -- To count the number of inserted/deleted/updated rows. Used for the log procedure
	DECLARE v_month VARCHAR2(30);
	DECLARE v_end_month DATE;
	DECLARE proc_name VARCHAR2(50) := ::CURRENT_OBJECT_NAME; -- The name of the procedure. Used for the log procedure
	DECLARE tenant VARCHAR2(50);

	v_log_count := 0;

	CALL EXT.REP_PROC_LOG (proc_name, 'Procedure starting...', v_log_count);

	SELECT TENANTID INTO tenant
	FROM CS_TENANT;

	SELECT NAME INTO v_month
	FROM TCMP.CS_PERIOD
	WHERE PERIODSEQ = in_periodseq
	AND REMOVEDATE = TO_DATE('22000101','yyyymmdd');
	
	SELECT ADD_DAYS(ENDDATE,-1) INTO v_end_month
	FROM TCMP.CS_PERIOD
	WHERE PERIODSEQ = in_periodseq
	AND REMOVEDATE = TO_DATE('22000101','yyyymmdd');
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'Executed period: '||v_month||'.', v_log_count);
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'Starting the deletion of the table REP_SALARY_QUERY.', v_log_count);
	
	DELETE FROM EXT.REP_SALARY_QUERY
	WHERE PERIODSEQ = in_periodseq;
	
	num_rows := ::rowcount;
	COMMIT;
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'End of the deletion REP_SALARY_QUERY: '||to_char(num_rows)||' rows.', v_log_count);
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'Starting the deletion of the table REP_SALARY_QUERY_TEMP.', v_log_count);
	
	DELETE FROM EXT.REP_SALARY_QUERY_TEMP;
	
	num_rows := ::rowcount;
	COMMIT;
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'End of the deletion REP_SALARY_QUERY_TEMP: '||to_char(num_rows)||' rows.', v_log_count);
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'Starting the deletion of the table REP_SALARY_QUERY_TEMP2.', v_log_count);
	
	DELETE FROM EXT.REP_SALARY_QUERY_TEMP2;
	
	num_rows := ::rowcount;
	COMMIT;
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'End of the deletion REP_SALARY_QUERY_TEMP2: '||to_char(num_rows)||' rows.', v_log_count);
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'Starting the loading of the table REP_SALARY_QUERY_TEMP.', v_log_count);
	
	INSERT INTO EXT.REP_SALARY_QUERY_TEMP
	SELECT DISTINCT 
		in_periodseq AS PERIODSEQ,
		v_month AS PERIOD_NAME,
		ET.PARTICIPANTID AS EMP_ID,
		PAR.PAYEESEQ AS PARTICIPANTSEQ,
		PAR.SALARY AS REF_SALARY,
		(PAR.SALARY * 12) AS ANN_REF_SALARY,
		PAR.EFFECTIVESTARTDATE AS REF_SALARY_LAST_UPD_TIME,
		ROW_NUMBER() OVER (PARTITION BY ET.PARTICIPANTID ORDER BY PAR.EFFECTIVESTARTDATE) AS ROW
	FROM (SELECT DISTINCT PARTICIPANTID FROM EXT.REP_EMPLOYEE_TOTAL WHERE PERIODSEQ = in_periodseq) ET
	LEFT JOIN TCMP.CS_PAYEE PAY ON PAY.PAYEEID = ET.PARTICIPANTID AND PAY.REMOVEDATE = TO_DATE ('01/01/2200', 'mm/dd/yyyy') AND PAY.TENANTID = tenant AND v_end_month >= PAY.EFFECTIVESTARTDATE AND v_end_month < PAY.EFFECTIVEENDDATE
	LEFT JOIN TCMP.CS_PARTICIPANT PAR ON PAR.PAYEESEQ = PAY.PAYEESEQ AND PAR.REMOVEDATE = TO_DATE ('01/01/2200', 'mm/dd/yyyy') AND PAR.TENANTID = tenant;
	
	num_rows := ::rowcount;
	COMMIT;
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'End of the loading in REP_SALARY_QUERY_TEMP: '||to_char(num_rows)||' rows.', v_log_count);
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'Starting the loading of the table REP_SALARY_QUERY_TEMP2.', v_log_count);
	

  INSERT INTO EXT.REP_SALARY_QUERY_TEMP2
  SELECT * 
  FROM EXT.REP_SALARY_QUERY_TEMP TMP1
  WHERE TMP1.ROW = 1;
  
  INSERT INTO EXT.REP_SALARY_QUERY_TEMP2
  SELECT 
    periodseq, period_name, 
    emp_id, participantseq, 
    ref_salary, ann_ref_salary, ref_salary_last_upd_time, 
    row
  from (
    SELECT x.*, 
    lag(x.REF_SALARY) over (partition by x.EMP_ID order by x.row) as prev_ref_salary
    FROM EXT.REP_SALARY_QUERY_TEMP x
  )
  where row != 1
  and ref_salary != prev_ref_salary;
 
  commit;
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'End of the loading in REP_SALARY_QUERY_TEMP2.', v_log_count);
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'Starting the loading of the table REP_SALARY_QUERY.', v_log_count);
	
	INSERT INTO EXT.REP_SALARY_QUERY
	SELECT DISTINCT
		'REP_SALARY_QUERY' AS TABLE_NAME,
		SAL.PERIODSEQ AS PERIODSEQ,
		SAL.PERIOD_NAME AS PERIOD_NAME,
		SAL.EMP_ID AS EMP_ID,
		PA.GENERICATTRIBUTE1 AS EMP_COUNTRY_CODE,
		CA.COUNTRY_NAME AS EMP_COUNTRY_NAME,
		CA.MARKET_NAME AS MARKET_NAME,
		CELL.VALUE AS OTE_PERC,
		CELL2.VALUE AS PAYMIX_BASE_PERC,
		(1 - CELL2.VALUE) AS PAYMIX_TI_PERC,
		DOC.IPL_START_DATE AS IPL_START_DATE,
		DOC.IPL_END_DATE AS IPL_END_DATE,
		SUBSTR_AFTER(DOC.IPL_STATUS, '_') AS IPL_APPR_STATUS,
		TI.NAME AS SALES_ROLE,
		SAL.REF_SALARY AS REF_SALARY,
		SAL.ANN_REF_SALARY AS ANN_REF_SALARY,
		SAL.REF_SALARY_LAST_UPD_TIME AS REF_SALARY_LAST_UPD_TIME,
		PA.GENERICATTRIBUTE12 AS EXECUTIVE_INC,
		PA.GENERICBOOLEAN1 AS ELIGIBILITY, --20230419 LLS: Added
		1 AS ROW --20230419 LLS: Added
		
		
	FROM EXT.REP_SALARY_QUERY_TEMP2 SAL
	LEFT JOIN TCMP.CS_PARTICIPANT PA ON PA.PAYEESEQ = SAL.PARTICIPANTSEQ AND PA.REMOVEDATE = TO_DATE ('01/01/2200', 'mm/dd/yyyy') AND PA.TENANTID = tenant AND SAL.REF_SALARY_LAST_UPD_TIME >= PA.EFFECTIVESTARTDATE AND SAL.REF_SALARY_LAST_UPD_TIME < PA.EFFECTIVEENDDATE
	LEFT JOIN 
		(
		SELECT DISTINCT
			CLA.GENERICATTRIBUTE1 AS COUNTRY_CODE,
			CLA.GENERICATTRIBUTE2 AS COUNTRY_NAME,
			CLA.GENERICATTRIBUTE6 AS GEO,
			CLA.GENERICATTRIBUTE8 AS COE_GEO,
			CLA.GENERICATTRIBUTE9 AS MARKET_CODE,
			CLA.GENERICATTRIBUTE10 AS MARKET_NAME,
			CA.EFFECTIVESTARTDATE AS CA_EFF_STARTDATE,
			CA.EFFECTIVEENDDATE AS CA_EFF_ENDDATE,
			CACL.EFFECTIVESTARTDATE AS CACL_EFF_STARTDATE,
			CACL.EFFECTIVEENDDATE AS CACL_EFF_ENDDATE,
			CL.EFFECTIVESTARTDATE AS CL_EFF_STARTDATE,
			CL.EFFECTIVEENDDATE AS CL_EFF_ENDDATE,
			CLA.EFFECTIVESTARTDATE AS CLA_EFF_STARTDATE,
			CLA.EFFECTIVEENDDATE AS CLA_EFF_ENDDATE
		FROM TCMP.CS_CATEGORY CA
		INNER JOIN TCMP.CS_CATEGORY_CLASSIFIERS CACL ON CACL.CATEGORYSEQ = CA.RULEELEMENTSEQ AND CACL.REMOVEDATE = TO_DATE ('01/01/2200', 'mm/dd/yyyy') AND CACL.TENANTID = tenant AND CACL.MODELSEQ = 0 
		INNER JOIN TCMP.CS_CLASSIFIER CL ON CL.CLASSIFIERSEQ = CACL.CLASSIFIERSEQ AND CL.REMOVEDATE = TO_DATE ('01/01/2200', 'mm/dd/yyyy') AND CL.TENANTID = tenant 
		INNER JOIN TCMP.CS_GENERICCLASSIFIER CLA ON CLA.CLASSIFIERSEQ = CL.CLASSIFIERSEQ AND CLA.REMOVEDATE = TO_DATE ('01/01/2200', 'mm/dd/yyyy') AND CLA.TENANTID = tenant
		WHERE 
			CA.NAME = 'Country'
			AND CA.MODELSEQ = 0
			AND CA.REMOVEDATE = TO_DATE ('01/01/2200', 'mm/dd/yyyy') 
			AND CA.TENANTID = tenant 
		) CA ON CA.COUNTRY_CODE = PA.GENERICATTRIBUTE1
				AND SAL.REF_SALARY_LAST_UPD_TIME >= CA.CA_EFF_STARTDATE AND SAL.REF_SALARY_LAST_UPD_TIME < CA.CA_EFF_ENDDATE
				AND SAL.REF_SALARY_LAST_UPD_TIME >= CA.CACL_EFF_STARTDATE AND SAL.REF_SALARY_LAST_UPD_TIME < CA.CACL_EFF_ENDDATE
				AND SAL.REF_SALARY_LAST_UPD_TIME >= CA.CL_EFF_STARTDATE AND SAL.REF_SALARY_LAST_UPD_TIME < CA.CL_EFF_ENDDATE
				AND SAL.REF_SALARY_LAST_UPD_TIME >= CA.CLA_EFF_STARTDATE AND SAL.REF_SALARY_LAST_UPD_TIME < CA.CLA_EFF_ENDDATE
	LEFT JOIN TCMP.CS_POSITION POS ON PA.PAYEESEQ = POS.PAYEESEQ AND POS.REMOVEDATE = TO_DATE ('01/01/2200', 'mm/dd/yyyy') AND POS.TENANTID = tenant AND SAL.REF_SALARY_LAST_UPD_TIME >= POS.EFFECTIVESTARTDATE AND SAL.REF_SALARY_LAST_UPD_TIME < POS.EFFECTIVEENDDATE
	LEFT JOIN TCMP.CS_TITLE TI ON TI.RULEELEMENTOWNERSEQ = POS.TITLESEQ AND TI.REMOVEDATE = TO_DATE ('01/01/2200', 'mm/dd/yyyy') AND TI.TENANTID = tenant AND SAL.REF_SALARY_LAST_UPD_TIME >= TI.EFFECTIVESTARTDATE AND SAL.REF_SALARY_LAST_UPD_TIME < TI.EFFECTIVEENDDATE
	LEFT JOIN 
		(
		SELECT DISTINCT
			DOC.POSITIONSEQ AS POSITIONSEQ,
			DOC.STARTDATE AS IPL_START_DATE,
			DOC.ENDDATE AS IPL_END_DATE,
			DOC.STATUS AS IPL_STATUS,
			DOC.ACCEPTDATE AS IPL_ACCEPT_DATE,
			DOC.DISTRIBUTEDATE AS IPL_DISTRIBUTE_DATE,
			DOC.NAME AS IPL_DISTRIBUTION_NAME,
			DOCT.NAME AS IPL_DOCUMENT_NAME
		FROM TCMP.CSP_DOCUMENTPROCESS DOC
		INNER JOIN TCMP.CSP_DOCUMENT DOCT ON DOC.DOCUMENTPROCESSSEQ = DOCT.DOCUMENTPROCESSSEQ AND DOCT.TENANTID = tenant
		WHERE 
			DOC.TENANTID = tenant
			
			AND DOC.STATUS NOT LIKE '%Dispute%'
			AND DOCT.NAME NOT LIKE '%Disclaimer%'		
		) DOC ON DOC.POSITIONSEQ = POS.RULEELEMENTOWNERSEQ 
				AND SAL.REF_SALARY_LAST_UPD_TIME >= DOC.IPL_START_DATE 
				AND SAL.REF_SALARY_LAST_UPD_TIME < DOC.IPL_END_DATE
				AND DOC.IPL_DISTRIBUTE_DATE = 
				(
					SELECT MAX(DISTRIBUTEDATE)
					FROM TCMP.CSP_DOCUMENTPROCESS DP
					INNER JOIN TCMP.CSP_DOCUMENT DT ON DP.DOCUMENTPROCESSSEQ = DT.DOCUMENTPROCESSSEQ AND DT.TENANTID = tenant
					WHERE 
						DP.POSITIONSEQ = DOC.POSITIONSEQ
						AND DP.TENANTID = tenant
						AND SAL.REF_SALARY_LAST_UPD_TIME >= DP.STARTDATE AND SAL.REF_SALARY_LAST_UPD_TIME < DP.ENDDATE
						AND DP.STATUS NOT LIKE '%Dispute%'
						AND DT.NAME NOT LIKE '%Disclaimer%'
				)
	LEFT JOIN
		(
		SELECT DISTINCT 
			MDLT.NAME NAME_MDLT, 
			DIM1.VAL_DIM VAL_DIM1, 
			DIM2.VAL_DIM VAL_DIM2,  
			VALUE,
			CELDA.EFFECTIVESTARTDATE VALUE_STARTDATE,
			CELDA.EFFECTIVEENDDATE VALUE_ENDDATE,
			MDLT.EFFECTIVESTARTDATE MDLT_STARTDATE,
			MDLT.EFFECTIVEENDDATE MDLT_ENDDATE
		FROM CS_RELATIONALMDLT MDLT
		INNER JOIN CS_MDLTCELL CELDA ON MDLT.RULEELEMENTSEQ=CELDA.MDLTSEQ AND CELDA.REMOVEDATE=TO_DATE ('01/01/2200', 'mm/dd/yyyy') AND CELDA.MODELSEQ = 0 AND CELDA.TENANTID = tenant
		INNER JOIN (SELECT DISTINCT IND.RULEELEMENTSEQ, IND.DIMENSIONSEQ, IND.ORDINAL, IND.MINSTRING  VAL_DIM
					FROM CS_MDLTINDEX IND
					WHERE IND.REMOVEDATE=TO_DATE ('01/01/2200', 'mm/dd/yyyy') 
					AND IND.MODELSEQ = 0
					AND IND.TENANTID = tenant
					ORDER BY IND.DIMENSIONSEQ
					) DIM1 ON CELDA.MDLTSEQ=DIM1.RULEELEMENTSEQ AND CELDA.DIM0INDEX=DIM1.ORDINAL AND DIM1.DIMENSIONSEQ=1 
		INNER JOIN (SELECT DISTINCT IND.RULEELEMENTSEQ, IND.DIMENSIONSEQ, IND.ORDINAL, IND.MINSTRING  VAL_DIM
					FROM CS_MDLTINDEX IND
					WHERE IND.REMOVEDATE=TO_DATE ('01/01/2200', 'mm/dd/yyyy') 
					AND IND.MODELSEQ = 0
					AND IND.TENANTID = tenant
					ORDER BY IND.DIMENSIONSEQ
					) DIM2 ON CELDA.MDLTSEQ=DIM2.RULEELEMENTSEQ AND CELDA.DIM1INDEX=DIM2.ORDINAL AND DIM2.DIMENSIONSEQ=2            
		WHERE UPPER(MDLT.NAME)='LT_OTE_UPLIFT' 
		AND MDLT.REMOVEDATE=TO_DATE ('01/01/2200', 'mm/dd/yyyy')
		AND MDLT.MODELSEQ = 0
		AND MDLT.TENANTID = tenant
		ORDER BY DIM1.VAL_DIM, DIM2.VAL_DIM
		) CELL ON CELL.VAL_DIM1 = PA.GENERICATTRIBUTE1 AND CELL.VAL_DIM2 = TI.NAME
				  AND SAL.REF_SALARY_LAST_UPD_TIME >= CELL.VALUE_STARTDATE 
				  AND SAL.REF_SALARY_LAST_UPD_TIME < CELL.VALUE_ENDDATE
				  AND SAL.REF_SALARY_LAST_UPD_TIME >= CELL.MDLT_STARTDATE 
				  AND SAL.REF_SALARY_LAST_UPD_TIME < CELL.MDLT_ENDDATE
	LEFT JOIN
		(
		SELECT DISTINCT 
			MDLT.NAME NAME_MDLT, 
			DIM1.VAL_DIM VAL_DIM1, 
			DIM2.VAL_DIM VAL_DIM2,  
			VALUE,
			CELDA.EFFECTIVESTARTDATE VALUE_STARTDATE,
			CELDA.EFFECTIVEENDDATE VALUE_ENDDATE,
			MDLT.EFFECTIVESTARTDATE MDLT_STARTDATE,
			MDLT.EFFECTIVEENDDATE MDLT_ENDDATE
		FROM CS_RELATIONALMDLT MDLT
		INNER JOIN CS_MDLTCELL CELDA ON MDLT.RULEELEMENTSEQ=CELDA.MDLTSEQ AND CELDA.REMOVEDATE=TO_DATE ('01/01/2200', 'mm/dd/yyyy') AND CELDA.MODELSEQ = 0 AND CELDA.TENANTID = tenant
		INNER JOIN (SELECT DISTINCT IND.RULEELEMENTSEQ, IND.DIMENSIONSEQ, IND.ORDINAL, IND.MINSTRING  VAL_DIM
					FROM CS_MDLTINDEX IND
					WHERE IND.REMOVEDATE=TO_DATE ('01/01/2200', 'mm/dd/yyyy') 
					AND IND.MODELSEQ = 0
					AND IND.TENANTID = tenant
					ORDER BY IND.DIMENSIONSEQ
					) DIM1 ON CELDA.MDLTSEQ=DIM1.RULEELEMENTSEQ AND CELDA.DIM0INDEX=DIM1.ORDINAL AND DIM1.DIMENSIONSEQ=1 
		INNER JOIN (SELECT DISTINCT IND.RULEELEMENTSEQ, IND.DIMENSIONSEQ, IND.ORDINAL, IND.MINSTRING  VAL_DIM
					FROM CS_MDLTINDEX IND
					WHERE IND.REMOVEDATE=TO_DATE ('01/01/2200', 'mm/dd/yyyy') 
					AND IND.MODELSEQ = 0
					AND IND.TENANTID = tenant
					ORDER BY IND.DIMENSIONSEQ
					) DIM2 ON CELDA.MDLTSEQ=DIM2.RULEELEMENTSEQ AND CELDA.DIM1INDEX=DIM2.ORDINAL AND DIM2.DIMENSIONSEQ=2            
		WHERE UPPER(MDLT.NAME)='LT_BASEPAY_PERCENT' 
		AND MDLT.REMOVEDATE=TO_DATE ('01/01/2200', 'mm/dd/yyyy')
		AND MDLT.MODELSEQ = 0
		AND MDLT.TENANTID = tenant
		ORDER BY DIM1.VAL_DIM, DIM2.VAL_DIM
		) CELL2 ON CELL2.VAL_DIM1 = PA.GENERICATTRIBUTE1 AND CELL2.VAL_DIM2 = TI.NAME
				  AND SAL.REF_SALARY_LAST_UPD_TIME >= CELL2.VALUE_STARTDATE 
				  AND SAL.REF_SALARY_LAST_UPD_TIME < CELL2.VALUE_ENDDATE
				  AND SAL.REF_SALARY_LAST_UPD_TIME >= CELL2.MDLT_STARTDATE 
				  AND SAL.REF_SALARY_LAST_UPD_TIME < CELL2.MDLT_ENDDATE
		;

		
	num_rows := ::rowcount;
	COMMIT;
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'End of the loading in REP_SALARY_QUERY: '||to_char(num_rows)||' rows.', v_log_count);
	
	COMMIT;
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'Starting to update the date in REP_LAST_UPDATE table.', v_log_count);
	
	CALL EXT.REP_PROC_LAST_UPDATE (in_periodseq, 'REP_SALARY_QUERY');	
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'End of updating the date in REP_LAST_UPDATE table.', v_log_count);
	
	SELECT v_log_count + 1 INTO v_log_count FROM DUMMY; 	
	CALL EXT.REP_PROC_LOG (proc_name, 'Procedure successful', v_log_count);
		
	    
END