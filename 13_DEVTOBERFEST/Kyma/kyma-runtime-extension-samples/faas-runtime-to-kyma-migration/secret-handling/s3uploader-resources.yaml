apiVersion: serverless.kyma-project.io/v1alpha1
kind: Function
metadata:
  labels:
    app.kubernetes.io/name: s3uploader
  name: s3uploader
  namespace: default
spec:
  buildResources: {}
  deps: |-
    {
      "name": "s3uploader",
      "version": "0.0.1",
      "dependencies": {
        "aws-sdk": "^2.553.0"
      }
    }
  env:
  - name: S3_BUCKET
    valueFrom:
      configMapKeyRef:
        key: S3_BUCKET
        name: s3-config
  - name: S3_ENDPOINT
    valueFrom:
      configMapKeyRef:
        key: S3_ENDPOINT
        name: s3-config
  - name: S3_ACCESSKEY_ID
    valueFrom:
      secretKeyRef:
        key: S3_ACCESSKEY_ID
        name: s3-secret
  - name: S3_SECRET
    valueFrom:
      secretKeyRef:
        key: S3_SECRET
        name: s3-secret
  maxReplicas: 1
  minReplicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi
  runtime: nodejs14
  source: |-
    "use strict";

    const AWS = require("aws-sdk");

    module.exports = {
      main: async function (event, context) {
        let s3 = new AWS.S3({
          endpoint: readEnv("S3_ENDPOINT"),
          accessKeyId: readEnv("S3_ACCESSKEY_ID"),
          secretAccessKey: readEnv("S3_SECRET"),
        });

        let body = JSON.stringify(event.data);

        let params = {
          Bucket: readEnv("S3_BUCKET"),
          Key: Date.now().toString(),
          Body: body,
        };
        try {
          return await s3.upload(params).promise();
        } catch (e) {
          console.log(e);
          return e;
        }
      },
    };

    function readEnv(env = "") {
      return process.env[env] || undefined;
    }
---
apiVersion: gateway.kyma-project.io/v1beta1
kind: APIRule
metadata:
  name: s3uploader
  namespace: default
spec:
  gateway: kyma-gateway.kyma-system.svc.cluster.local
  host: s3uploader
  service:
    name: s3uploader
    port: 80
  rules:
  - accessStrategies:
    - handler: allow
    methods:
    - POST
    path: /.*
